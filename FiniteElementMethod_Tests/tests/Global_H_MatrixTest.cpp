#include "pch.h"

#include "gtest/gtest.h"

#include "Simulation.h"

static const double EPSILON = 1e-3;

double globalHMatrixFixture[16][16] = {
    { 16.667, -4.1667, 0, 0, -4.1667, -8.3333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { -4.1667, 33.333, -4.1667, 0, -8.3333, -8.3333, -8.3333, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, -4.1667, 33.333, -4.1667, 0, -8.3333, -8.3333, -8.3333, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, -4.1667, 16.667, 0, 0, -8.3333, -4.1667, 0, 0, 0, 0, 0, 0, 0, 0 },
    { -4.1667, -8.3333, 0, 0, 33.333, -8.3333, 0, 0, -4.1667, -8.3333, 0, 0, 0, 0, 0, 0 },
    { -8.3333, -8.3333, -8.3333, 0, -8.3333, 66.667, -8.3333, 0, -8.3333, -8.3333, -8.3333, 0, 0, 0, 0, 0 },
    { 0, -8.3333, -8.3333, -8.3333, 0, -8.3333, 66.667, -8.3333, 0, -8.3333, -8.3333, -8.3333, 0, 0, 0, 0 },
    { 0, 0, -8.3333, -4.1667, 0, 0, -8.3333, 33.333, 0, 0, -8.3333, -4.1667, 0, 0, 0, 0 },
    { 0, 0, 0, 0, -4.1667, -8.3333, 0, 0, 33.333, -8.3333, 0, 0, -4.1667, -8.3333, 0, 0 },
    { 0, 0, 0, 0, -8.3333, -8.3333, -8.3333, 0, -8.3333, 66.667, -8.3333, 0, -8.3333, -8.3333, -8.3333, 0 },
    { 0, 0, 0, 0, 0, -8.3333, -8.3333, -8.3333, 0, -8.3333, 66.667, -8.3333, 0, -8.3333, -8.3333, -8.3333 },
    { 0, 0, 0, 0, 0, 0, -8.3333, -4.1667, 0, 0, -8.3333, 33.333, 0, 0, -8.3333, -4.1667 },
    { 0, 0, 0, 0, 0, 0, 0, 0, -4.1667, -8.3333, 0, 0, 16.667, -4.1667, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, -8.3333, -8.3333, -8.3333, 0, -4.1667, 33.333, -4.1667, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.3333, -8.3333, -8.3333, 0, -4.1667, 33.333, -4.1667 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.3333, -4.1667, 0, 0, -4.1667, 16.667 }
};

TEST(Global_H_MatrixTest, GeneratesValidMatrixFor_Test1_4_4)
{
    // Given
    Simulation simulation(FileTypeEnum::TEXT, "../../../Input/Grids/Test1_4_4.txt");

    // When
    simulation.Run();

    // Then
    for (int i = 0; i < 16; i++) for (int j = 0; j < 16; j++)
        EXPECT_NEAR(globalHMatrixFixture[i][j], simulation.m_Grid.m_GlobalHMatrix.GetElement(i, j), EPSILON);
}
